import { createAsyncThunk, createSlice, PayloadAction } from "@reduxjs/toolkit";
import { RootState, AppThunk } from "../../app/store";
import { fetchFilms } from "./filmAPI";
import { IQueryParams, IFilmState, IFilmDataState } from "../../utilities";

const initialState: IFilmState = {
  query: {
    apikey: process.env.REACT_APP_API_KEY,
    t: "",
    s: "Pokemon",
    y: "",
    type: "",
    page: 1,
  },
  status: "idle",
  filmData: {} as IFilmDataState,
  error: null,
};

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
export const getFilmsWithParams = createAsyncThunk(
  "films/fetchFilms",
  async (params: IQueryParams) => {
    const response = await fetchFilms(params);
    // The value we return becomes the `fulfilled` action payload
    return response;
  }
);

export const filmSlice = createSlice({
  name: "films",
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    // Use the PayloadAction type to declare the contents of `action.payload`
    incrementByAmount: (state, action: PayloadAction<number>) => {
      // state.value += action.payload;
    },
    //TODO: filter query params
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(getFilmsWithParams.pending, (state) => {
        state.status = "loading";
      })
      .addCase(getFilmsWithParams.fulfilled, (state, action) => {
        state.status = "idle";
        state.filmData = action.payload;
        console.log("state", action.payload);
      })
      .addCase(getFilmsWithParams.rejected, (state) => {
        state.status = "failed";
      });
  },
});

export const { incrementByAmount } = filmSlice.actions;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
export const selectFilters = (state: RootState) => state.films.query;
export const selectStatus = (state: RootState) => state.films.status;
export const selectFilmData = (state: RootState) => state.films.filmData;
export const selectErrors = (state: RootState) => state.films.error;

// We can also write thunks by hand, which may contain both sync and async logic.
// Here's an example of conditionally dispatching actions based on current state.
// export const incrementIfOdd =
//   (amount: number): AppThunk =>
//   (dispatch, getState) => {
//     const currentValue = selectCount(getState());
//     if (currentValue % 2 === 1) {
//       dispatch(incrementByAmount(amount));
//     }
//   };

export default filmSlice.reducer;
